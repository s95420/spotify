version: "3"

services:
  mongodb:
    build: "./db"
    container_name: mongodb
    ports:
      - 27017:27017
    networks:
      testing_net:
        ipv4_address: 172.28.1.1
    volumes:
      - ./db/script.sh:/docker-entrypoint-initdb.d/script.sh
      - data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootuser
      - MONGO_INITDB_ROOT_PASSWORD=rootpass
      - MONGO_INITDB_ROOT_DATABASE=spotify

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    networks:
      testing_net:
        ipv4_address: 172.28.1.2
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
      - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
      - ME_CONFIG_MONGODB_SERVER=mongodb

  backend:
    build: "./backend"
    container_name: "backend"
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=rootuser
      - SPRING_DATA_MONGODB_PASSWORD=rootpass
      - SPRING_DATA_MONGODB_PORT=27017
      - SPRING_DATA_MONGODB_DATABASE=spotify
      - SPRING_DATA_MONGODB_HOST=172.28.1.1
      - SERVER_ERROR_INCLUDE_MESSAGE=always
    networks:
      testing_net:
        ipv4_address: 172.28.1.3
    depends_on:
      - mongodb

  frontend:
    build: "./frontend"
    container_name: "frontend"
    volumes:
      - './:/app'
      - '/app/node_modules'
    ports:
      - 3000:3000
    stdin_open: true
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      testing_net:
        ipv4_address: 172.28.1.4
    depends_on:
      - backend

volumes:
  data: {}

networks:
  testing_net:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
